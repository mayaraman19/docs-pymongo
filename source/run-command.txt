.. _pymongo-run-command:

======================
Run a Database Command
======================

.. contents:: On this page
   :local:
   :backlinks: none
   :depth: 2
   :class: singlecol

.. facet::
   :name: genre
   :values: reference

.. meta::
   :keywords: administration, code example

Overview
--------

In this guide, you can learn how to use {+driver-short+}
to run a database command. You can use database commands to perform a
variety of administrative and diagnostic tasks, such as fetching server
statistics, initializing a replica set, or running an aggregation pipeline.

.. important:: Prefer Library Methods to Database Commands

   The library provides wrapper methods for many database commands.
   We recommend using these methods instead of executing database
   commands when possible.
   
   To perform administrative tasks, use the :mongosh:`MongoDB Shell </>`
   instead of {+driver-short+}. The shell provides helper methods
   that might not be available in the driver.
   
   If there are no available helpers in the library or the shell, you
   can use the ``db.runCommand()`` shell method or the driver's
   ``command()`` method, which is described in this
   guide.

.. _pymongo-execute-command:

Execute a Command
-----------------

To run a database command, you must specify the command and any relevant
parameters in a command document, then pass the command document to the
``command()`` method.

The following code shows how you can use the ``command()``
method on a ``Database`` to run the ``hello``
command, which returns information about the server:

.. literalinclude:: /includes/run-command.py
   :language: python
   :start-after: start-hello
   :end-before: end-hello

To find a link to a full list of database commands and corresponding
parameters, see the :ref:`Additional Information section
<pymongo-addtl-info-runcommand>`.

.. _pymongo-command-response:

Command Cursor
--------------

The ``command()`` method returns the result of the command that was run.
You can also use the ``cursor_command()`` method, which issues a MongoDB 
command and parses the response as a `CommandCursor <{+api-root+}command_cursor.html#pymongo.command_cursor.CommandCursor>`__.
The ``CommandCursor`` can be used to iterate over command results.

The following example uses the ``cursor_command()`` method on the ``sample_mflix``
database. It runs the ``find`` command on the ``movies`` database to filter by
documents in which the ``runtime``field has a value of ``11``.

.. literalinclude:: /includes/run-command.py
    :language: python
    :dedent:
    :start-after: start-cursor-command
    :end-before: end-cursor-command

Before you run a command, learn about the response format of the command so that
you can handle the ``CommandCursor`` accordingly.

.. note:: Read Preference

   The ``command()`` and ``cursor_command()`` methods do not obey the read preference you might
   have set on your ``Database`` instance elsewhere in your code. If a 
   `Client Session <{+api-root+}bson/objectid.html#bson.objectid.ObjectId>`__ is
   provided by using the ``session`` parameter, and this session is in a 
   `transaction <{+api-root+}client_session.html#transactions>`__, the command's
   read preference will be set to the transaction's read preference. Otherwise,
   the command's read preference defaults to ``PRIMARY``.
   
   You can set a read preference for command execution by using the ``read_preference``
   parameter, as shown in the following code:
   
   .. literalinclude:: /includes/run-command.py
      :language: python
      :dedent:
      :start-after: start-readpref
      :end-before: end-readpref

   Learn more about the ``read_preferences`` module in the `API documentation
   <{+api-root+}read_preferences.html#module-pymongo.read_preferences>`__.

   To learn more about read preference options, see :manual:`Read
   Preference </core/read-preference/>` in the {+mdb-server+} manual.

.. _pymongo-command-example:

Command Example
---------------

The following example uses the ``command()`` method to run
the ``dbStats`` command to retrieve storage statistics for the
``sample_mflix`` database:

.. io-code-block::
    :copyable: true

    .. input:: /includes/run-command.py
        :language: python
        :start-after: start-runcommand
        :end-before: end-runcommand

    .. output::
        :language: none
        :visible: false

        {'db': 'sample_mflix', 'collections': 9, 'views': 1, 'objects': 67662,
        'avgObjSize': 1796.788182436227, 'dataSize': 121574282, 'storageSize': 97779712,
        'totalFreeStorageSize': 0, 'numExtents': 0, 'indexes': 13, 'indexSize': 19423232,
        'indexFreeStorageSize': 0, 'fileSize': 0, 'nsSizeMB': 0, 'ok': 1}

The output of this command includes information about the collections in
the database, and describes the amount and size of data stored across
collections.

.. _pymongo-addtl-info-runcommand:

Additional Information
----------------------

For more information about the concepts in this guide, see the following
documentation in the {+mdb-server+} manual:

- :manual:`db.runCommand() </reference/method/db.runCommand/>`
- :manual:`Database Commands </reference/command/>`
- :manual:`hello Command </reference/command/hello/>`
- :manual:`find Command </reference/command/find>`
- :manual:`dbStats Command </reference/command/dbStats/>`

API Documentation
~~~~~~~~~~~~~~~~~

For more information about the ``command()`` and ``cursor_command()`` methods, 
see the following {+driver-short+} API documentation:

- `command() <{+api-root+}database.html#pymongo.database.Database.command>`__
- `cursor_command() <{+api-root+}database.html#pymongo.database.Database.cursor_command>`__